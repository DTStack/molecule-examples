{"version":3,"sources":["extensions/monaco-sync/index.tsx","extensions/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sourceEditor","id","name","closable","data","language","formattedEditor","ExtendsMonacoSync","activate","a","molecule","editor","open","layout","toggleMenuBarVisibility","toggleSidebarVisibility","toggleActivityBarVisibility","Promise","resolve","setTimeout","getGroupById","editorInstance","formattingEditor","onDidChangeModelContent","value","getValue","formatting","JSON","stringify","parse","e","setValue","dispose","customExtensions","App","extensions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAQMA,EAA2B,CAC7BC,GAAI,IACJC,KAAM,cACNC,UAAU,EACVC,KAAM,CACFC,SAAU,SAIZC,EAA+B,CACjCL,GAAI,IACJE,UAAU,EACVD,KAAM,YACNE,KAAM,CACFC,SAAU,SAILE,EAAgC,CACzCN,GAAI,iBACJC,KAAM,YACNM,SAAS,WAAD,4BAAE,8BAAAC,EAAA,6DACNC,IAASC,OAAOC,KAAKZ,EAzBZ,GA0BTU,IAASC,OAAOC,KAAKN,EAzBX,GA0BVI,IAASG,OAAOC,0BAKhBJ,IAASG,OAAOE,0BAChBL,IAASG,OAAOG,8BATV,SAWe,IAAIC,SACrB,SAACC,GACGC,YAAW,WAAO,IAAD,EACbD,EAAO,UAACR,IAASC,OAAOS,aAAa,UAA9B,aAAC,EAAiCC,sBAd/C,cAWAV,EAXA,iBAmBI,IAAIM,SAA4C,SAACC,GACnDC,YAAW,WAAO,IAAD,EACbD,EAAO,UAACR,IAASC,OAAOS,aAAa,UAA9B,aAAC,EAAiCC,sBArB/C,QAkBAC,EAlBA,OAyBNX,EAAOY,yBAAwB,WAC3B,IAAMC,EAAQb,EAAOc,WACjBC,EAAa,GAEjB,IACIA,EAAaC,KAAKC,UAAUD,KAAKE,MAAML,GAAQ,KAAM,GACvD,MAAOM,GACLJ,EAAaF,EAEjBF,EAAiBS,SAASL,MAlCxB,4CAAF,kDAAC,GAqCTM,QAxCyC,cCxBhCC,EAAiC,CAAC1B,G,SCchC2B,MARf,WACE,OACE,cAAC,IAAD,CAAkBC,WAAYF,EAA9B,SACI,cAAC,IAAD,OCGOG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.21c199b4.chunk.js","sourcesContent":["import molecule from '@dtinsight/molecule';\nimport { IEditorTab } from '@dtinsight/molecule/esm/model';\nimport { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { editor as MonacoEditor } from '@dtinsight/molecule/esm/monaco';\n\nconst leftPane = 1;\nconst rightPane = 2;\n\nconst sourceEditor: IEditorTab = {\n    id: '1',\n    name: 'Source Code',\n    closable: false,\n    data: {\n        language: 'json',\n    },\n};\n\nconst formattedEditor: IEditorTab =  {\n    id: '2',\n    closable: false,\n    name: 'Formatted',\n    data: {\n        language: 'json',\n    },\n}\n\nexport const ExtendsMonacoSync: IExtension = {\n    id: 'ExtendDataSync',\n    name: 'Data Sync',\n    activate: async () => {\n        molecule.editor.open(sourceEditor, leftPane);\n        molecule.editor.open(formattedEditor, rightPane);\n        molecule.layout.toggleMenuBarVisibility();\n        /**\n         * TODO: it can cooperate with Pane to make some error prompts\n         */\n        // molecule.layout.togglePanelVisibility();\n        molecule.layout.toggleSidebarVisibility();\n        molecule.layout.toggleActivityBarVisibility();\n\n        const editor = await new Promise<MonacoEditor.IStandaloneCodeEditor>(\n            (resolve) => {\n                setTimeout(() => {\n                    resolve(molecule.editor.getGroupById(1)?.editorInstance);\n                });\n            }\n        );\n        const formattingEditor =\n            await new Promise<MonacoEditor.IStandaloneCodeEditor>((resolve) => {\n                setTimeout(() => {\n                    resolve(molecule.editor.getGroupById(2)?.editorInstance);\n                });\n            });\n\n        editor.onDidChangeModelContent(() => {\n            const value = editor.getValue();\n            let formatting = '';\n\n            try {\n                formatting = JSON.stringify(JSON.parse(value), null, 2);\n            } catch (e) {\n                formatting = value;\n            }\n            formattingEditor.setValue(formatting);\n        }) as any;\n    },\n    dispose() {},\n};\n","import { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { ExtendsMonacoSync } from './monaco-sync';\nexport const customExtensions: IExtension[] = [ExtendsMonacoSync];\n","import React from 'react';\nimport { MoleculeProvider, Workbench } from '@dtinsight/molecule';\nimport '@dtinsight/molecule/esm/style/mo.css';\n\nimport './App.css';\n\nimport { customExtensions } from './extensions';\n\nfunction App() {\n  return (\n    <MoleculeProvider extensions={customExtensions}>\n        <Workbench />\n    </MoleculeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}