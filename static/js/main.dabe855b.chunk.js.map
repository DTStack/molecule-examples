{"version":3,"sources":["common/http.ts","api/index.ts","components/dataSource/detail.tsx","views/dataSource/dataSourceSidebar.tsx","extensions/dataSource/base.tsx","components/formItem/index.tsx","views/dataSource/createDataSource.tsx","extensions/dataSource/index.ts","common/index.ts","extensions/theFirstExtension/base.tsx","extensions/theFirstExtension/folderTreeController.ts","extensions/theFirstExtension/index.ts","extensions/theFirstExtension/searchPaneController.ts","views/terminal/terminalPanelView.tsx","extensions/terminal/base.tsx","extensions/terminal/index.ts","extensions/problems/index.ts","extensions/running/base.tsx","extensions/running/index.ts","extensions/oneDarkPro/index.ts","extensions/i18n/index.ts","extensions/settings/index.ts","extensions/menubar/index.ts","extensions/action/keybindingAction.ts","extensions/action/quickOpenAction.ts","extensions/action/index.ts","extensions/index.ts","views/mySidePane.tsx","views/myMenuBar/index.tsx","views/myWorkbench.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["httpUtils","url","params","newUrl","this","build","request","method","body","options","JSON","stringify","buildFormData","form","FormData","credentials","headers","fetch","then","response","json","res","catch","err","Accept","ps","p","push","encodeURIComponent","join","data","append","basePath","api","getFolderTree","http","get","search","value","query","getDataSource","getDataSourceById","sourceId","Promise","resolve","reject","id","name","type","jdbcUrl","updateTime","Date","now","createDataSource","dataSource","code","message","result","nodeItem","target","includes","children","forEach","item","styledTable","margin","display","DataSourceDetail","className","style","Tree","molecule","component","TreeView","Toolbar","Collapse","DataSourceSidebarView","state","currentDataSource","undefined","fetchDataSource","a","API","setState","selectedSource","node","isLeaf","fetchData","event","EventBus","subscribe","reload","editor","open","createDataSourceTab","icon","title","onClick","create","renderPanel","onSelect","width","height","localize","toolbar","renderHeaderToolbar","renderCollapse","React","Component","Input","FormItemWrapper","styled","div","FormItemLabel","label","FormItem","props","restProps","htmlFor","autoComplete","Button","CreateDataSource","CreateDataBtn","CreateDataSourceView","formRef","submit","e","current","toString","getTime","notification","add","render","container","NotificationController","toggleNotifications","close","existCreateDataSourceView","createRef","ref","onSubmit","textAlign","marginLeft","DATA_SOURCE_ID","dataSourceActivityBar","sortIndex","dataSourceSidebar","renderPane","createDataSourceMenuItem","group","getState","closeTab","DataSourceExtension","extensionCtx","initUI","sidebar","activityBar","setTimeout","menuBar","remove","transformToEditorTab","tabData","breadcrumb","location","split","map","local","STATUS_BAR_LANGUAGE","folderTreeData","cloneDeep","folderTree","updateStatusBarLanguage","language","toUpperCase","languageStatusItem","statusBar","getStatusBarItem","Float","right","update","Object","assign","FirstExtension","folderTreeController","onSelectFile","file","moleculeEditor","onSelectTab","tabId","groupId","getGroupById","tab","getTabById","onSearch","replaceValue","config","setResult","onResultClick","Error","Terminal","xtermRef","useRef","useEffect","terminal","writeln","allowTransparency","theme","background","terminalPanel","TerminalExtension","panel","mockProblems","startLineNumber","startColumn","endLineNumber","endColumn","status","ProblemsExtension","problems","EDITOR_ACTION_RUNNING","place","disabled","EDITOR_ACTION_GITHUB","RunningExtension","_timer","onClickAction","builtInEditorInitialActions","builtin","getModule","setDefaultActions","onActionsClick","menuId","updateActions","appendOutput","window","clearTimeout","OneDarkPro","require","themes","packageThemes","contributes","index","locales","ExtendLocales","IContributeType","Languages","activate","dispose","customSettings","demo","SettingsExtension","settings","onChangeSettings","alert","appendSettingsItems","handleSettingsChange","vscodeMenuItem","MenuBarExtension","builtInMenuBarData","getModules","setMenus","href","reset","KeybindingAction","ID","precondition","f1","keybinding","weight","KeybindingWeight","WorkbenchContrib","when","primary","KeyChord","KeyMod","CtrlCmd","KeyCode","KeyS","accessor","Action2","QuickOpenAction","LABEL","alias","KeyP","quickPick","IQuickInputService","createQuickPick","items","placeholder","activeItems","canSelectMany","queryPick","debounce","onDidChangeValue","onDidAccept","i","hide","show","ActionExtension","registerAction","extensions","MySidePaneView","useCallback","MySidePane","menuBarService","MenuBarService","menuBarController","MenuBarController","Logo","img","MyMenuBarView","connect","updateFocusinEle","handleSaveFocusinEle","document","addEventListener","removeEventListener","alt","src","role","mode","MenuMode","Horizontal","trigger","rawData","resData","concat","stack","length","head","pop","simplyKeybinding","KeybindingHelper","queryGlobalKeybinding","convertSimpleKeybindingToString","addKeybindingForData","mainBenchClassName","prefixClaName","workbenchClassName","compositeBarClassName","appClassName","classNames","APP_PREFIX","getFontInMac","layoutController","LayoutController","layoutService","LayoutService","onPaneSizeChange","onHorizontalPaneSizeChange","splitPanePos","horizontalSplitPanePos","ID_APP","tabIndex","hidden","allowResize","onChange","minSize","initialSize","maxSize","panelMaximized","panelHidden","getContent","panes","NotFound","padding","__DEVELOPMENT__","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dabe855b.chunk.js","sourcesContent":["import 'whatwg-fetch';\n\nclass Http {\n\n    get(url: any, params?: any) {\n        const newUrl = params ? this.build(url, params) : url;\n        return this.request(newUrl, {\n            method: 'GET',\n        });\n    }\n\n    post(url: any, body?: any) {\n        const options: any = { method: 'POST' };\n        if (body) options.body = JSON.stringify(body);\n        return this.request(url, options);\n    }\n\n    postAsFormData(url: any, params: any) {\n        const options: any = { method: 'POST' };\n        if (params) options.body = this.buildFormData(params);\n        return this.request(url, options);\n    }\n\n    postForm(url: any, form: any) {\n        const options: any = { method: 'POST' };\n        if (form) options.body = new FormData(form);\n        return this.request(url, options);\n    }\n\n    request(url: any, options: RequestInit) {\n        options.credentials = 'same-origin';\n        options.headers = {\n            ...options.headers,\n        };\n        return (\n            fetch(url, options)\n                .then((response: any) => {\n                    return response.json();\n                })\n                .then((res) => {\n                    return res;\n                })\n                .catch((err: any) => {\n                    return err;\n                })\n        );\n    }\n\n    defaultHeader() {\n        const header: any = {\n            Accept: '*/*',\n            'Content-Type': 'application/json',\n        };\n        return header;\n    }\n\n    build(url: any, params: any) {\n        const ps: any = [];\n        if (params) {\n            for (const p in params) {\n                if (p) {\n                    ps.push(p + '=' + encodeURIComponent(params[p]));\n                }\n            }\n        }\n        return url + '?' + ps.join('&');\n    }\n\n    buildFormData(params: any) {\n        if (params) {\n            const data = new FormData();\n            for (const p in params) {\n                if (p) {\n                    data.append(p, params[p]);\n                }\n            }\n            return data;\n        }\n    }\n}\n\nconst httpUtils = new Http();\n\nexport default httpUtils;","import http from \"../common/http\";\n\nconst basePath = './mock';\n\nconst api = {\n    getFolderTree() {\n        return http.get(`${basePath}/folderTree.json`);\n    },\n\n    search(value: string) {\n        return http.get(`${basePath}/folderTree.json`, { query: value });\n    },\n\n    getDataSource() {\n        return http.get(`${basePath}/dataSource.json`);\n    },\n\n    getDataSourceById(sourceId: string): Promise<DataSourceType> {\n        return new Promise<DataSourceType>((resolve, reject) => {\n            const mockDataSource: DataSourceType = {\n                id: sourceId,\n                name: `dataSource` + sourceId,\n                type: 'MySQL',\n                jdbcUrl: 'http://jdbc:127.0.0.1//3306',\n                updateTime: Date.now() + ''\n            }\n            resolve(mockDataSource)\n        });\n    },\n\n    createDataSource(dataSource: Omit<DataSourceType, 'id'>) {\n        return new Promise((resolve, reject) => {\n            resolve({\n                code: 200,\n                message: 'success',\n                data: dataSource\n            })\n        });\n    },\n\n    async query(query: string = '') {\n        const res = await http.get(`${basePath}/folderTree.json`);\n        const result: any[] = [];\n        const search = (nodeItem: any) => {\n            if (!nodeItem) return;\n            const target = nodeItem.name || '';\n            if (target.includes(query) || query.includes(target)) {\n                result.push(nodeItem);\n            }\n            if (nodeItem.children) {\n                nodeItem.children.forEach((item: any) => { search(item) })\n            }\n        }\n        search(res.data);\n\n        return result;\n    }\n}\n\nexport default api;","import React from 'react';\n\nexport type DataSourceDetailProps = {\n    dataSource?: Partial<DataSourceType>;\n}\n\nconst styledTable = {\n    margin: 10,\n    display: 'block'\n}\n\nexport function DataSourceDetail({ dataSource = {} }: DataSourceDetailProps) {\n    const { name, type, jdbcUrl, updateTime } = dataSource;\n    return (\n        <div className=\"dataSource__detail\">\n            <table style={styledTable}>\n                <tr><td>Name：</td><td>{name}</td></tr>\n                <tr><td>Type：</td><td>{type}</td></tr>\n                <tr><td>JdbcUrl：</td><td>{jdbcUrl}</td></tr>\n                <tr><td>Update Time：</td><td>{updateTime}</td></tr>\n            </table>\n        </div>\n    );\n}\n\nexport default DataSourceDetail;\n","import React from 'react';\nimport molecule from '@dtinsight/molecule';\nimport { Header, Content } from '@dtinsight/molecule/esm/workbench/sidebar';\nimport { IActionBarItemProps, ITreeNodeItemProps } from '@dtinsight/molecule/esm/components';\nimport { ICollapseItem } from '@dtinsight/molecule/esm/components/collapse';\nimport { localize } from '@dtinsight/molecule/esm/i18n/localize';\n\nimport API from '../../api';\nimport DataSourceDetail from '../../components/dataSource/detail';\nimport { openCreateDataSourceView } from '../../extensions/dataSource/base';\n\n\nconst Tree = molecule.component.TreeView;\nconst Toolbar = molecule.component.Toolbar;\nconst Collapse = molecule.component.Collapse;\nexport class DataSourceSidebarView extends React.Component {\n\n    state = {\n        data: [],\n        currentDataSource: undefined\n    }\n\n    componentDidMount() {\n        this.fetchData();\n        molecule.event.EventBus.subscribe('addDataSource', () => { this.reload() });\n    }\n\n    async fetchData() {\n        const res = await API.getDataSource();\n        if (res.message === 'success') {\n            this.setState({\n                data: res.data.children || []\n            });\n        }\n    }\n\n    fetchDataSource = async (id: string) => {\n        const dataSource = await API.getDataSourceById(id);\n        this.setState({ currentDataSource : dataSource });\n    }\n\n    reload() {\n        this.fetchData();\n    }\n\n    create() {\n        openCreateDataSourceView();\n    }\n\n    selectedSource = (node: ITreeNodeItemProps) => {\n        if (node.isLeaf) {\n            this.fetchDataSource(node.id as string);\n        }\n    }\n\n    renderHeaderToolbar(): IActionBarItemProps[] {\n        return [\n            {\n                icon: 'refresh',\n                id: 'reload',\n                title: 'Reload',\n                onClick: () => this.reload()\n            }, {\n                icon: 'add',\n                id: 'addDataSource',\n                title: 'Create Data Source',\n                onClick: () => this.create()\n            }\n        ]\n    }\n\n    renderCollapse(): ICollapseItem[] {\n        const dataSource: DataSourceType | undefined = this.state.currentDataSource;\n        return [\n            {\n                id: 'DataSourceList',\n                name: 'Catalogue',\n                renderPanel: () => {\n                    return (\n                        <Tree data={this.state.data} onSelect={this.selectedSource}/>\n                    )\n                }\n            },\n            {\n                id: 'DataSourceDetail',\n                name: 'Detail',\n                renderPanel: () => {\n                    return (\n                        <DataSourceDetail dataSource={dataSource}/>\n                    )\n                }\n            },\n        ]\n    }\n\n    render() {\n        return (\n            <div className=\"dataSource\" style={{width: '100%', height: '100%' }}>\n                <Header title={ localize('demo.dataSourceManagement', \"DataSource Management\") } toolbar={\n                    <Toolbar data={this.renderHeaderToolbar()} />\n                }/>\n                <Content>\n                    <Collapse data={this.renderCollapse()} />\n                </Content>\n            </div>\n        );\n    }\n}\n\nexport default DataSourceSidebarView;\n","import { IActivityBarItem, IEditorTab, ISidebarPane, IMenuBarItem } from '@dtinsight/molecule/esm/model';\nimport DataSourceView from '../../views/dataSource/dataSourceSidebar';\nimport CreateDataSourceView from '../../views/dataSource/createDataSource';\nimport molecule from '@dtinsight/molecule';\nimport { localize } from '@dtinsight/molecule/esm/i18n/localize';\n\nexport const DATA_SOURCE_ID = 'DataSource';\n\nexport const dataSourceActivityBar: IActivityBarItem = {\n    id: DATA_SOURCE_ID,\n    sortIndex: -1, // sorting the dataSource to the first position\n    name: 'Data Source',\n    title: 'Data Source Management',\n    icon: 'database'\n}\n\nexport const dataSourceSidebar: ISidebarPane = {\n    id: DATA_SOURCE_ID,\n    title: 'DataSourcePane',\n    render: () => {\n        return <DataSourceView />;\n    }\n}\n\nexport const createDataSourceTab: IEditorTab = {\n    id: DATA_SOURCE_ID,\n    name: 'Create Data Source',\n    renderPane: () => {\n        return <CreateDataSourceView />;\n    }\n}\n\nexport const createDataSourceMenuItem: IMenuBarItem = {\n    id: 'menu.createDataSource',\n    name: localize('menu.createDataSource', 'Create Data Source'),\n    icon: ''\n}\n\nexport function openCreateDataSourceView() {\n    molecule.editor.open(createDataSourceTab);\n}\n\nexport function existCreateDataSourceView() {\n    const group = molecule.editor.getState().current;\n    if (group) {\n        molecule.editor.closeTab(createDataSourceTab.id!, group.id!);\n    }\n}","import React from 'react';\nimport molecule from '@dtinsight/molecule';\nimport styled from 'styled-components'\n\n\nconst Input = molecule.component.Input;\n\nexport type FormItemProps = {\n    style?: React.CSSProperties;\n    className?: string;\n    label: string;\n    name: string;\n    id: string;\n}\n\n\nexport const FormItemWrapper = styled.div`\n    margin-bottom: 10px;\n`;\n\nexport const FormItemLabel = styled.label`\n    line-height: 28px;\n`;\n\nexport function FormItem(props: React.PropsWithChildren<Partial<FormItemProps>>) {\n    const { id, label, name, children, ...restProps} = props;\n    return (\n        <FormItemWrapper {...restProps}>\n            { label ? <FormItemLabel title={label} htmlFor={id}>\n                {label}: \n                </FormItemLabel>\n            : null }\n            { children || <Input id={id} name={name || label} autoComplete=\"false\"/>}\n        </FormItemWrapper>\n    )\n}","import React from 'react';\nimport molecule from '@dtinsight/molecule';\nimport styled from 'styled-components'\nimport { container } from 'tsyringe';\n\nimport API from '../../api';\nimport { FormItem } from '../../components/formItem';\nimport { existCreateDataSourceView } from '../../extensions/dataSource/base';\nimport { NotificationController } from '@dtinsight/molecule/esm/controller';\n\nconst Button = molecule.component.Button;\n\nconst CreateDataSource = styled.div`\n    width: 50%;\n    margin: auto;\n`\n\nconst CreateDataBtn= styled(Button)`\n    width: 120px;\n    display: inline-block;\n`\n\nexport class CreateDataSourceView extends React.Component {\n\n    state = {\n        data: [],\n        currentDataSource: undefined\n    }\n\n    formRef: React.RefObject<HTMLFormElement>;\n\n    constructor(props: any) {\n        super(props);\n        this.formRef = React.createRef();\n    }\n\n    componentDidMount() {}\n\n    submit = async (e: React.FormEvent) => {\n        const form = new FormData(this.formRef.current || undefined);\n        const dataSource = {\n            name: form.get('name')?.toString() || '',\n            type: form.get('type')?.toString() || '',\n            jdbcUrl: form.get('jdbcUrl')?.toString()  || '',\n            updateTime: new Date().getTime().toString()\n        }\n\n        API.createDataSource(dataSource).then((res: any) => {\n            if (res.code === 200) {\n\n                molecule.notification.add([{\n                    id: 2,\n                    value: dataSource,\n                    render(item) {\n                        return <p>Create the Database <b>{item.value.name}</b> is success!</p>\n                    }\n                }]);\n                container.resolve(NotificationController).toggleNotifications();\n                // molecule.notification.toggleNotification(); // Invalid\n            }\n        });\n    }\n\n    close = async (e: React.FormEvent) => {\n        existCreateDataSourceView();\n    }\n\n    render() {\n        return (\n            <CreateDataSource className=\"dataSource__create\">\n               <form ref={this.formRef} onSubmit={this.submit}>\n                    <FormItem label=\"Name\" name=\"name\"/>\n                    <FormItem label=\"Type\" name=\"type\"/>\n                    <FormItem label=\"JdbcUrl\" name=\"jdbcUrl\"/>\n                    <FormItem style={{ textAlign: 'left' }}>\n                        <CreateDataBtn style={{ marginLeft: 0 }} onClick={this.submit}>Create</CreateDataBtn>\n                        <CreateDataBtn onClick={this.close}>Close</CreateDataBtn>\n                    </FormItem>\n               </form>\n            </CreateDataSource>\n        );\n    }\n}\n\nexport default CreateDataSourceView;\n","\nimport molecule from '@dtinsight/molecule';\nimport { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { IExtensionService } from '@dtinsight/molecule/esm/services';\nimport { DATA_SOURCE_ID, dataSourceActivityBar, dataSourceSidebar, createDataSourceMenuItem } from './base';\n\nexport class DataSourceExtension implements IExtension {\n\n    id: string = DATA_SOURCE_ID;\n    name: string = 'Data Source';\n\n    activate(extensionCtx: IExtensionService): void {\n        this.initUI();\n    }\n\n    initUI() {\n        molecule.sidebar.add(dataSourceSidebar);\n        molecule.activityBar.add(dataSourceActivityBar);\n\n        setTimeout(() => { // TODO: upgrade the Molecule and remove it.\n            molecule.menuBar.append(createDataSourceMenuItem, 'File');\n        })\n    }\n\n    dispose(extensionCtx: IExtensionService): void {\n        molecule.sidebar.remove(dataSourceSidebar.id);\n        molecule.activityBar.remove(dataSourceActivityBar.id);\n    }\n}","import { IEditorTab, IFolderTreeNodeProps } from '@dtinsight/molecule/esm/model';\n\nexport function transformToEditorTab(item: IFolderTreeNodeProps): IEditorTab {\n    const tabData: IEditorTab = item;\n    tabData.breadcrumb = item.location \n        ? \n        item.location.split('/')\n            .map((local: string) => ({ id: local, name: local }) )\n        : \n        []\n    return tabData;\n}","import { IStatusBarItem } from '@dtinsight/molecule/esm/model';\n\nexport const STATUS_BAR_LANGUAGE: IStatusBarItem = {\n    id: 'LanguageStatus',\n    sortIndex: 3,\n}","import molecule from '@dtinsight/molecule';\nimport { Float, IFolderTreeNodeProps } from '@dtinsight/molecule/esm/model';\nimport { transformToEditorTab } from '../../common';\n\nimport { cloneDeep } from 'lodash';\nimport API from '../../api';\nimport { STATUS_BAR_LANGUAGE } from './base';\n\nexport async function initFolderTree () {\n    const res = await API.getFolderTree();\n    if (res.message === 'success') {\n        const folderTreeData = cloneDeep(res.data);\n        molecule.folderTree.add(folderTreeData);\n    }\n}\n\nexport function handleSelectFolderTree() {\n    molecule.folderTree.onSelectFile((file: IFolderTreeNodeProps) => {\n        molecule.editor.open(transformToEditorTab(file))\n        updateStatusBarLanguage(file.data.language);\n    });\n}\n\nexport function updateStatusBarLanguage(language: string) {\n    if (!language) return;\n    language = language.toUpperCase();\n    const languageStatusItem = molecule.statusBar.getStatusBarItem(STATUS_BAR_LANGUAGE.id, Float.right);\n    if (languageStatusItem) {\n        languageStatusItem.name = language;\n        molecule.statusBar.update(languageStatusItem, Float.right);\n    } else {\n        molecule.statusBar.add(Object.assign({}, STATUS_BAR_LANGUAGE, { name: language } ), Float.right);\n    }\n}\n\nexport function handleStatusBarLanguage() {\n    const moleculeEditor = molecule.editor;\n    moleculeEditor.onSelectTab((tabId, groupId) => {\n        if (!groupId) return;\n        const group = moleculeEditor.getGroupById(groupId);\n        if (!group) return;\n        const tab: any = moleculeEditor.getTabById(tabId, group.id!);\n        if (tab) {\n            updateStatusBarLanguage(tab.data!.language!);\n        }\n    })\n}","\nimport { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { IExtensionService } from '@dtinsight/molecule/esm/services';\nimport * as folderTreeController from './folderTreeController';\nimport * as searchPaneController from './searchPaneController';\nexport class FirstExtension implements IExtension {\n\n    id: string = '';\n    name: string = '';\n\n    constructor(\n        id: string = 'TheFirstExtension', \n        name: string = 'The First Extension'\n    ) {\n        this.id = id;\n        this.name = name;\n    }\n\n    activate(extensionCtx: IExtensionService): void {\n        folderTreeController.initFolderTree();\n        folderTreeController.handleSelectFolderTree();\n        folderTreeController.handleStatusBarLanguage();\n        searchPaneController.handleSearchEvent();\n        searchPaneController.handleSelectSearchResult();\n    }\n\n    dispose(extensionCtx: IExtensionService): void {\n        throw new Error('Method not implemented.');\n    }\n}","import molecule from '@dtinsight/molecule';\nimport API from '../../api';\nimport { transformToEditorTab } from '../../common';\n\nexport function handleSelectSearchResult() {\n    molecule.search.onResultClick((item) => {\n        molecule.editor.open(transformToEditorTab(item));\n    });\n}\n\nexport function handleSearchEvent() {\n    molecule.search.onSearch(async (value, replaceValue, config) => {\n        if (!value) return;\n\n        const res = await API.search(value);\n        if (res.message === 'success') {\n            molecule.search.setResult(res.data.children);\n        }\n    });\n}","import React from 'react';\nimport { XTerm } from 'xterm-for-react';\n\nexport const Terminal = () => {\n    const xtermRef: any = React.useRef(null)\n\n    React.useEffect(() => {\n        // You can call any method in XTerm.js by using 'xterm xtermRef.current.terminal.[What you want to call]\n        if (xtermRef && xtermRef.current && xtermRef.current.terminal) {\n            xtermRef.current.terminal.writeln(\"Hello, Molecule!\")\n        }\n    }, [])\n\n    return (\n        <div style={{ margin: '10px 18px' }}>\n            <XTerm \n                ref={xtermRef} \n                options={{\n                    allowTransparency: true,\n                    theme: {\n                        background: 'var(--panel-background)',\n                    }\n                }}\n            />\n        </div>\n    )\n}\n","import { localize } from \"@dtinsight/molecule/esm/i18n/localize\";\nimport { IPanelItem } from \"@dtinsight/molecule/esm/model\";\nimport { Terminal } from '../../views/terminal/terminalPanelView';\n\nexport const TERMINAL_ID = 'terminalID';\n\nexport const terminalPanel: IPanelItem = {\n    id: TERMINAL_ID,\n    name: localize('demo.terminal', 'Terminal'),\n    title: 'Terminal',\n    sortIndex: 1,\n    renderPane: () => {\n        return (<Terminal />)\n    }\n}","import molecule from '@dtinsight/molecule';\nimport { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { IExtensionService } from '@dtinsight/molecule/esm/services';\nimport { terminalPanel } from './base';\n\nexport class TerminalExtension implements IExtension {\n\n    id: string = 'Terminal';\n    name: string = 'Terminal';\n\n    activate(extensionCtx: IExtensionService): void {\n        molecule.panel.add(terminalPanel);\n    }\n\n    dispose(extensionCtx: IExtensionService): void {\n        molecule.panel.remove(terminalPanel.id);\n    }\n}","import molecule from '@dtinsight/molecule';\nimport { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { IExtensionService } from '@dtinsight/molecule/esm/services';\n\nconst mockProblems = {\n    id: 1,\n    name: 'text.tsx',\n    isLeaf: false,\n    value: {\n        code: 'text.tsx',\n        message: 'Folder',\n        startLineNumber: 0,\n        startColumn: 1,\n        endLineNumber: 0,\n        endColumn: 1,\n        status: 1,\n    },\n    children: [\n        {\n            id: 3,\n            name: '0-1',\n            isLeaf: true,\n            value: {\n                code: 'endLineNumber',\n                message: 'Syntax Error',\n                startLineNumber: 0,\n                startColumn: 1,\n                endLineNumber: 0,\n                endColumn: 1,\n                status: 8,\n            },\n            children: [],\n        },\n        {\n            id: 4,\n            name: '0-1',\n            isLeaf: true,\n            value: {\n                code: 'endLineNumber',\n                message: 'Warning, useless variables!',\n                startLineNumber: 0,\n                startColumn: 1,\n                endLineNumber: 0,\n                endColumn: 1,\n                status: 4,\n            },\n            children: [],\n        },\n        {\n            id: 5,\n            name: '0-1',\n            isLeaf: true,\n            value: {\n                code: 'endLineNumber',\n                message: 'Just a normal message!',\n                startLineNumber: 0,\n                startColumn: 1,\n                endLineNumber: 0,\n                endColumn: 1,\n                status: 2,\n            },\n            children: [],\n        },\n    ],\n};\n\nexport class ProblemsExtension implements IExtension {\n\n    id: string = '';\n    name: string = '';\n\n    constructor(\n        id: string = 'Problems', \n        name: string = 'Problems'\n    ) {\n        this.id = id;\n        this.name = name;\n    }\n\n    activate(extensionCtx: IExtensionService): void {\n        molecule.problems.add(mockProblems);\n    }\n\n    dispose(extensionCtx: IExtensionService): void {\n        molecule.panel.remove(mockProblems.id + '');\n    }\n}","import { IEditorActionsProps } from \"@dtinsight/molecule/esm/model\";\n\nexport const EDITOR_ACTION_RUNNING_ID = 'runningTab';\nexport const EDITOR_ACTION_RUNNING_GITHUB = 'githubAction';\n\nexport const EDITOR_ACTION_RUNNING: IEditorActionsProps = {\n    id: EDITOR_ACTION_RUNNING_ID,\n    name: 'Run',\n    icon: 'play',\n    place: 'outer',\n    disabled: false,\n    title: 'Running',\n}\n\n\nexport const EDITOR_ACTION_GITHUB: IEditorActionsProps = {\n    id: EDITOR_ACTION_RUNNING_GITHUB,\n    name: 'View in Github',\n    icon: 'github',\n    place: 'inner',\n    title: 'View in Github',\n}","import molecule from '@dtinsight/molecule';\nimport { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { IExtensionService } from '@dtinsight/molecule/esm/services';\nimport { EDITOR_ACTION_RUNNING, EDITOR_ACTION_GITHUB } from './base';\n\nexport class RunningExtension implements IExtension {\n\n    id: string = '';\n    name: string = '';\n    \n    private _timer!: any;\n\n    constructor(\n        id: string = 'EditorRunning', \n        name: string = 'EditorRunning'\n    ) {\n        this.id = id;\n        this.name = name;\n    }\n\n    activate(extensionCtx: IExtensionService): void {\n        this.initUI();\n        this.onClickAction();\n    }\n\n    initUI() {\n        // TODO \n        this._timer = setTimeout(() => {\n            const builtInEditorInitialActions = molecule.builtin.getModule('builtInEditorInitialActions');\n            molecule.editor.setDefaultActions([ \n                {...EDITOR_ACTION_RUNNING }, \n                {...EDITOR_ACTION_GITHUB }, \n                ...builtInEditorInitialActions?.value\n            ]);\n        });\n    }\n\n    onClickAction() {\n        molecule.editor.onActionsClick(async (menuId, current) => {\n            switch (menuId) {\n                case EDITOR_ACTION_RUNNING.id: {\n                    molecule.editor.updateActions([\n                        {\n                            id: EDITOR_ACTION_RUNNING.id,\n                            icon: 'loading~spin',\n                            disabled: true,\n                        }\n                    ]);\n\n                    molecule.panel.appendOutput('Start running...\\n');\n                    molecule.panel.appendOutput('Running success!!!\\n');\n                    this._timer = setTimeout(() => {\n                        molecule.editor.updateActions([\n                            {\n                                ...EDITOR_ACTION_RUNNING,\n                                disabled: false,\n                            }\n                        ]);\n                        molecule.panel.appendOutput('Running end.');\n                    }, 600);\n                    break;\n                }\n                case EDITOR_ACTION_GITHUB.id: {\n                   window.open('https://github.com/DTStack/molecule', '_blank');\n                   break;\n                }\n                default: {\n                    //\n                }\n            }\n        });\n    }\n\n    dispose(extensionCtx: IExtensionService): void {\n        clearTimeout(this._timer);\n    }\n}","import { IExtension } from \"@dtinsight/molecule/esm/model\";\n\nconst OneDarkPro: IExtension = require('./package.json');\nconst themes = [\n    require('./themes/OneDark-Pro.json'),\n    require('./themes/OneDark-Pro-flat.json'),\n    require('./themes/OneDark-Pro-darker.json'),\n];\n\nconst packageThemes = OneDarkPro.contributes?.themes || [];\n\nOneDarkPro.contributes!.themes = packageThemes.map((theme, index) => {\n    theme.id = theme.label;\n    theme = Object.assign({}, theme, themes[index]);\n    return theme;\n});\n\nOneDarkPro.id = 'OneDarkPro';\n\nexport { OneDarkPro };\n","import { IContributeType, IExtension } from \"@dtinsight/molecule/esm/model\";\n\nconst zhCN = require('./zh-CN.json');\nconst locales = [zhCN];\n\nexport const ExtendLocales: IExtension = {\n    id: 'ExtendLocales',\n    name: 'Extend locales',\n    contributes: {\n        [IContributeType.Languages]: locales,\n    },\n    activate() {},\n    dispose() {},\n};","import molecule from '@dtinsight/molecule';\nimport { IExtension } from '@dtinsight/molecule/esm/model';\nimport { IExtensionService } from '@dtinsight/molecule/esm/molecule.api';\n\nexport const customSettings = {\n    demo: {\n        id: 'test'\n    }\n}\n\nexport class SettingsExtension implements IExtension {\n\n    id: string = 'ExtendSettings';\n    name: string = 'Extend Settings';\n\n    appendSettingsItems() {\n        molecule.settings.append(customSettings);\n    }\n\n    handleSettingsChange() {\n        const panel = molecule.panel;\n        molecule.settings.onChangeSettings((settings: any) => {\n            panel.appendOutput('The settings changed: \\n');\n            panel.appendOutput(JSON.stringify(settings));\n            alert('Settings changed:' + settings.demo?.id)\n        })\n    }\n\n    activate(extensionCtx: IExtensionService): void {\n        this.appendSettingsItems();\n        this.handleSettingsChange();\n    }\n\n    dispose(extensionCtx: IExtensionService): void {\n    }\n}","\nimport molecule from '@dtinsight/molecule';\nimport { IExtension, IMenuBarItem } from '@dtinsight/molecule/esm/model';\nimport { IExtensionService } from '@dtinsight/molecule/esm/services';\n\nexport const vscodeMenuItem: IMenuBarItem = {\n    id: 'menu.vscode',\n    name: 'VSCode',\n    icon: '',\n}\n\nexport class MenuBarExtension implements IExtension {\n\n    id: string = 'MyMenubar';\n    name: string = 'MyMenu Bar';\n\n    activate(extensionCtx: IExtensionService): void {\n        this.initUI();\n    }\n\n    initUI() {\n        // TODO: upgrade the Molecule and remove it.\n        const { builtInMenuBarData } = molecule.builtin.getModules();\n        setTimeout(() => { \n            molecule.menuBar.setMenus([...builtInMenuBarData, vscodeMenuItem ]);\n        });\n\n        molecule.menuBar.onSelect((menuId) => {\n            if (menuId === vscodeMenuItem.id) {\n                window.location.href = '#/vscode';\n            }\n        })\n    }\n\n    dispose() {\n        molecule.menuBar.reset();\n    }\n}","import { Action2, KeybindingWeight } from \"@dtinsight/molecule/esm/monaco/common\";\nimport { KeyCode, KeyMod } from \"@dtinsight/molecule/esm/monaco\";\n//@ts-ignore\nimport { KeyChord } from 'monaco-editor/esm/vs/base/common/keyCodes';\n\nexport class KeybindingAction extends Action2 {\n\n    static readonly ID = 'AutoSave';\n\n    constructor() {\n        super({\n            id: KeybindingAction.ID,\n            precondition: undefined,\n            f1: false, // Not show in the Command Palette\n            keybinding: {\n                weight: KeybindingWeight.WorkbenchContrib,\n                when: undefined,\n                primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyS)\n            },\n        })\n    }\n\n    run(accessor: any, ...args: any[]) {\n        alert('Save success!');\n        // do something\n    }\n}","import { Action2, KeybindingWeight } from \"@dtinsight/molecule/esm/monaco/common\";\nimport { KeyCode, KeyMod } from \"@dtinsight/molecule/esm/monaco\";\nimport {\n    IQuickInputService,\n    //@ts-ignore\n} from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput';\n//@ts-ignore\nimport { KeyChord } from 'monaco-editor/esm/vs/base/common/keyCodes';\n\nimport molecule from '@dtinsight/molecule';\nimport { debounce } from \"lodash\";\n\nimport API from '../../api';\nimport { transformToEditorTab } from '../../common';\n\nexport class QuickOpenAction extends Action2 {\n\n    static readonly ID = 'QuickOpenFile';\n    static readonly LABEL = 'Search files by name';\n\n    constructor() {\n        super({\n            id: QuickOpenAction.ID,\n            label: QuickOpenAction.LABEL,\n            title: QuickOpenAction.LABEL,\n            alias: QuickOpenAction.LABEL,\n            precondition: undefined,\n            f1: true, // Whether show the QuickOpenFile in Command Palette\n            keybinding: {\n                weight: KeybindingWeight.WorkbenchContrib,\n                when: undefined,\n                primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyP)\n            },\n        })\n    }\n\n    run(accessor: any, ...args: any[]) {\n        const quickInputService = accessor.get(IQuickInputService);\n\n        const quickPick = quickInputService.createQuickPick();\n        quickPick.items = [];\n        quickPick.placeholder = QuickOpenAction.LABEL;\n\n        quickPick.activeItems = [];\n        quickPick.canSelectMany = false;\n\n        const queryPick = debounce((value) => {\n            API.query(value).then(res => {\n                quickPick.items = res.map(item => {\n                    item.label = item.name;\n                    return item;\n                });\n            });\n        }, 300);\n\n        quickPick.onDidChangeValue(queryPick);\n\n        quickPick.onDidAccept((i: any) => {\n            const item = quickPick.activeItems[0];\n            if (item) {\n                molecule.editor.open(transformToEditorTab(item));\n            }\n            quickPick.hide();\n        });\n        quickPick.show();\n    }\n}","\nimport { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { IExtensionService } from '@dtinsight/molecule/esm/services';\n\nimport { KeybindingAction } from './keybindingAction';\nimport { QuickOpenAction } from './quickOpenAction';\n\nexport class ActionExtension implements IExtension {\n\n    id: string = 'actionExtension';\n    name: string = 'Action Extension';\n\n    activate(extensionCtx: IExtensionService): void {\n        // Register the Action\n        extensionCtx.registerAction(QuickOpenAction);\n        extensionCtx.registerAction(KeybindingAction);\n    }\n\n    dispose(extensionCtx: IExtensionService): void {\n        throw new Error('Method not implemented.');\n    }\n}","import { IExtension } from '@dtinsight/molecule/esm/model';\nimport { DataSourceExtension } from './dataSource';\nimport { FirstExtension } from './theFirstExtension';\nimport { TerminalExtension } from './terminal';\nimport { ProblemsExtension } from './problems';\nimport { RunningExtension } from './running';\nimport { OneDarkPro } from './oneDarkPro/index';\nimport { ExtendLocales } from './i18n';\nimport { SettingsExtension } from './settings';\nimport { MenuBarExtension } from './menubar/index';\nimport { ActionExtension } from './action';\n\nconst extensions: IExtension[] = [\n    new FirstExtension(),\n    new DataSourceExtension(),\n    new TerminalExtension(),\n    new ProblemsExtension(),\n    new RunningExtension(),\n    new SettingsExtension(),\n    new MenuBarExtension(),\n    new ActionExtension(),\n    OneDarkPro,\n    ExtendLocales,\n\n];\n\nexport default extensions;","import React from 'react';\nimport molecule from '@dtinsight/molecule';\nimport { Header, Content } from '@dtinsight/molecule/esm/workbench/sidebar';\nimport { IActionBarItemProps } from '@dtinsight/molecule/esm/components';\nimport { localize } from '@dtinsight/molecule/esm/i18n/localize';\nimport { ISidebarPane } from '@dtinsight/molecule/esm/model';\n\nconst Toolbar = molecule.component.Toolbar;\n\nexport function MySidePaneView() {\n\n    const renderHeaderToolbar = React.useCallback((): IActionBarItemProps[] =>  {\n        return [\n            {\n                icon: 'arrow-both',\n                id: 'tools',\n                title: 'Layout the right SidePane',\n            }\n        ]\n    }, []);\n\n    return (\n        <div className={'mySidePane'}>\n            <Header\n                title={localize('demo.rightSidebar.title', 'Tools')}\n                toolbar={\n                    <Toolbar data={renderHeaderToolbar()} />\n                }\n            />\n            <Content>\n                <p style={{ textAlign: 'center' }}>Right Side Pane</p>\n            </Content>\n        </div>\n    )\n    \n}\n\n\nexport const MySidePane: ISidebarPane = {\n    id: 'mySidePane',\n    title: 'Tools',\n    render: () => {\n        return <MySidePaneView />;\n    }\n}","import 'reflect-metadata';\nimport { container } from 'tsyringe';\nimport React, { useCallback, useEffect } from 'react';\n\nimport { connect } from '@dtinsight/molecule/esm/react';\nimport { MenuBarController } from '@dtinsight/molecule/esm/controller/menuBar';\n\nimport { IMenuBar, IMenuBarItem } from '@dtinsight/molecule/esm/model/workbench/menuBar';\nimport { IMenuBarController } from '@dtinsight/molecule/esm/controller/menuBar';\nimport { IMenuProps, Menu, MenuMode } from '@dtinsight/molecule/esm/components';\nimport { KeybindingHelper } from '@dtinsight/molecule/esm/services/keybinding';\nimport { MenuBarService } from '@dtinsight/molecule/esm/services';\n\nimport './style.css';\nimport styled from 'styled-components';\n\nconst menuBarService = container.resolve(MenuBarService);\nconst menuBarController = container.resolve(MenuBarController);\n\nconst Logo = styled.img`\n    height: 25px;\n    margin: 0 12px;\n`\n\nexport function MenuBar(props: IMenuBar & IMenuBarController) {\n    const { data, onClick, updateFocusinEle } = props;\n\n    const addKeybindingForData = (\n        rawData: IMenuBarItem[] = []\n    ): IMenuProps[] => {\n        const resData: IMenuProps[] = rawData.concat();\n        const stack = [...resData];\n        while (stack.length) {\n            const head = stack.pop();\n            if (head) {\n                if (head?.data) {\n                    stack.push(...head.data);\n                } else {\n                    const simplyKeybinding =\n                        KeybindingHelper.queryGlobalKeybinding(head.id!) || [];\n                    if (simplyKeybinding.length) {\n                        head.keybinding = KeybindingHelper.convertSimpleKeybindingToString(\n                            simplyKeybinding\n                        );\n                    }\n                }\n            }\n        }\n        return resData;\n    };\n\n    const handleClick = (e: React.MouseEvent, item: IMenuBarItem) => {\n        onClick?.(e, item);\n    };\n\n    const handleSaveFocusinEle = useCallback((e: FocusEvent) => {\n        updateFocusinEle?.(e.target as HTMLElement | null);\n    }, [updateFocusinEle]);\n\n    useEffect(() => {\n        document.body.addEventListener('focusin', handleSaveFocusinEle);\n        return () => {\n            document.body.removeEventListener('focusin', handleSaveFocusinEle);\n        };\n    }, [ handleSaveFocusinEle ]);\n\n    return (\n        <div className=\"myMenuBar\">\n            <Logo alt=\"logo\" src=\"logo@1x.png\"/>\n            <Menu\n                role=\"menu\"\n                mode={MenuMode.Horizontal}\n                trigger=\"click\"\n                onClick={handleClick}\n                style={{ width: '100%' }}\n                data={addKeybindingForData(data)}\n            />\n        </div>\n    );\n}\n\nconst MyMenuBarView = connect(menuBarService, MenuBar, menuBarController);\n\nexport default MyMenuBarView;\n","import 'reflect-metadata';\nimport { container } from 'tsyringe';\nimport React from 'react';\nimport SplitPane from 'react-split-pane';\n//@ts-ignore\nimport Pane from 'react-split-pane/lib/Pane';\n\nimport { EditorView } from '@dtinsight/molecule/esm//workbench/editor';\nimport { SidebarView, Sidebar } from '@dtinsight/molecule/esm//workbench/sidebar';\nimport { ActivityBarView } from '@dtinsight/molecule/esm/workbench/activityBar';\nimport { StatusBarView } from '@dtinsight/molecule/esm//workbench/statusBar';\nimport { PanelView } from '@dtinsight/molecule/esm//workbench/panel';\n\nimport { ID_APP } from '@dtinsight/molecule/esm/common/id';\nimport { APP_PREFIX } from '@dtinsight/molecule/esm/common/const';\nimport { classNames, getFontInMac, prefixClaName } from '@dtinsight/molecule/esm/common/className';\n\nimport { connect } from '@dtinsight/molecule/esm/react';\n\nimport { ILayoutController, LayoutController } from '@dtinsight/molecule/esm/controller/layout';\nimport { LayoutService } from '@dtinsight/molecule/esm/services';\nimport { ILayout } from '@dtinsight/molecule/esm/model/workbench/layout';\nimport { IWorkbench } from '@dtinsight/molecule/esm/model/workbench';\n\nimport { MySidePane } from './mySidePane';\nimport MyMenuBarView from './myMenuBar';\n\nconst mainBenchClassName = prefixClaName('mainBench');\nconst workbenchClassName = prefixClaName('workbench');\nconst compositeBarClassName = prefixClaName('compositeBar');\nconst appClassName = classNames(APP_PREFIX, getFontInMac());\n\nconst layoutController = container.resolve(LayoutController);\nconst layoutService = container.resolve(LayoutService);\n\nfunction WorkbenchView(props: IWorkbench & ILayout & ILayoutController) {\n    const {\n        activityBar,\n        menuBar,\n        panel,\n        sidebar,\n        statusBar,\n        onPaneSizeChange,\n        onHorizontalPaneSizeChange,\n        splitPanePos,\n        horizontalSplitPanePos,\n    } = props;\n\n    const getContent = (panelMaximized: boolean, panelHidden: boolean) => {\n        const editor = (\n            <Pane\n                key=\"editorView\"\n                initialSize={panelHidden ? '100%' : horizontalSplitPanePos[0]}\n                maxSize=\"100%\"\n                minSize=\"10%\"\n            >\n                <EditorView />\n            </Pane>\n        );\n\n        const panel = (\n            <Pane key=\"panelView\">\n                <PanelView />\n            </Pane>\n        );\n\n        if (panelHidden) {\n            return editor;\n        }\n        if (panelMaximized) {\n            return panel;\n        }\n        return [editor, panel];\n    };\n\n    return (\n        <div id={ID_APP} className={classNames(appClassName, 'myMolecule')} tabIndex={0}>\n            <div className={workbenchClassName}>\n                {!menuBar.hidden && <MyMenuBarView />}\n                <div className={mainBenchClassName}>\n                    <div className={compositeBarClassName}>\n                        {!activityBar.hidden && <ActivityBarView />}\n                    </div>\n                    <SplitPane\n                        split=\"vertical\"\n                        primary=\"first\"\n                        allowResize={true}\n                        onChange={onPaneSizeChange as any}\n                    >\n                        <Pane\n                            minSize=\"170px\"\n                            initialSize={splitPanePos[0]}\n                            maxSize=\"80%\"\n                            className={sidebar.hidden && 'hidden'}\n                        >\n                            <SidebarView />\n                        </Pane>\n                        <SplitPane\n                            primary=\"first\"\n                            split=\"horizontal\"\n                            allowResize={true}\n                            // react-split-pane onChange: (newSizes: [size, ratio]) => void；\n                            onChange={onHorizontalPaneSizeChange as any}\n                        >\n                            {getContent(!!panel.panelMaximized, !!panel.hidden)}\n                        </SplitPane>\n                        <Pane\n                            minSize=\"40px\"\n                            initialSize=\"240px\"\n                            maxSize=\"40%\"\n                            className={'rightSidebar'}\n                        >\n                            <Sidebar current={MySidePane.id} panes={[MySidePane]} />\n                        </Pane>\n                    </SplitPane>\n                </div>\n            </div>\n            {!statusBar.hidden && <StatusBarView />}\n        </div>\n    );\n}\n\nexport default connect(\n    layoutService,\n    WorkbenchView,\n    layoutController\n);\n","import React from 'react';\nimport { Routes, Route } from \"react-router-dom\";\n\nimport { MoleculeProvider, Workbench } from '@dtinsight/molecule';\nimport '@dtinsight/molecule/esm/style/mo.css';\n\nimport extensions from './extensions';\nimport MyWorkbench from './views/myWorkbench';\nimport './App.css';\n\n(window as any).__DEVELOPMENT__ = false;\n\nfunction NotFound() {\n  return (\n    <main style={{ padding: \"1rem\" }}>\n      <p>There's nothing here!</p>\n    </main>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MoleculeProvider extensions={extensions}>\n          <Routes>\n            <Route path=\"/\" element={<MyWorkbench />} />\n            <Route path=\"vscode\" element={<Workbench />} />\n            <Route path=\"*\" element={<NotFound />} />\n          </Routes>\n        </MoleculeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}